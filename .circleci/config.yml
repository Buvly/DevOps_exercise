version: 2.1
orbs: 
  aws-cli: circleci/aws-cli@2.0.3

# Exercise: Reusable Job Code
commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>
  
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name mystack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_environment


  configure_infrastructure: 
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4a:9a:17:27:76:3a:6d:27:ac:18:c3:45:18:6a:65:44"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            pip install ansible 
      - run:
          name: Configure server
          command: |
            echo $PATH
            
            ansible-playbook -i inventory.txt main.yml
        
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: install curl
          command: |
            apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com"
            # Test if website exists
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi
      - destroy_environment

create_and_deploy_front_end:
 # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
 # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
 create_and_deploy_front_end:
   docker:
     - image: amazon/aws-cli
   steps:
    - checkout
    - run:
      name: Execute bucket.yml - Create Cloudformation Stack
      command: |
       aws cloudformation deploy \
       --template-file bucket.yml \
       --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
       --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
     # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
    - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete


  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt
  
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" 

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}



workflows:
  # Name the workflow "welcome"
  my_workflow:
    # Run the welcome/run job in its own container
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
              - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
              - get_last_deployment_id
              - promote_to_production
        